Defense Framework
========================================

Depth of defense
----------------------------------------
According to the depth, defense can be divided into several layers: physical layer, data layer, terminal layer, system layer, network layer, and application layer. There are layers of progressive interdependence in these depths.

Physical layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There is less contact in the physical layer in actual applications, but it is still a very important position. If the physical layer is designed improperly, it is easy for attackers to bypass the upper layer defense through physical means.

Data layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data is at a lower level of defense depth, and the target of attack is often to obtain data. Many defenses also revolve around the data not being destroyed or stolen.

Terminal layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Terminals include PCs, mobile phones, IoT and other smart devices. Whether the terminal connected to the network is trustworthy is a problem that needs to be solved.

System layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When the operating system is running on the terminal, there may be problems such as raising rights and unauthorized access.

Network layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The network layer uses communication lines to connect multiple computers to each other and communicate in accordance with the agreed protocol. There are attacks such as MITM and DDoS in the network layer.

Application layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The application layer is the top layer, mainly involving various attacks of web applications.

Access control
----------------------------------------
Web applications need to restrict user access to the application's data and features to prevent unauthorized access by users. The access control process can be divided into three parts: verification, session management and access control.

Verification mechanism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The verification mechanism is a basic part of the user access processing of an application, and verification is to determine the validity of the user. Most web applications use the verification model, i.e. the user submits a username and password, and the application checks its validity. In applications where security is important such as banks, basic verification models often require additional certificates and multi-level login processes, such as client certificates, hardware, etc.

Session Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To implement effective access control, the application needs a method to identify and process this series of requests from each different user. Most programs create a unique token for each session to identify.

For attackers, the session management mechanism is highly dependent on the security of tokens. In some cases, an attacker can use a web application as a victim authorized user. There may be several reasons for this situation. One is the flaw of the algorithm generated by the token, which allows the attacker to guess the token of other users; the other is the flaw of the token subsequent processing method, which allows the attacker to obtain the token of other users. .

Access control
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The last step in handling user access is to correctly decide whether to allow or deny each independent request. If the previous mechanisms are working properly, the application knows the id of the user from which each received request comes and determines whether the user is authorized for the requested action or data to be accessed.

Due to the complexity of access control itself, this makes it a common target for attackers. Developers often make flawed assumptions about how users will interact with applications, and often omit access control checks on certain application functions.

Input processing
----------------------------------------
Many attacks on web applications involve submitting unanticipated input, which leads to behavior that the application designer does not expect. Therefore, a key requirement for application security protection is that it must process user input in a secure way.

Input-based vulnerabilities can appear anywhere in the functionality of an application and are related to the type of technology it uses. For this kind of attack, input verification is a necessary protection commonly used. There are several commonly used protection mechanisms: blacklist, whitelist, filtering, and processing.

blacklist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A blacklist contains a set of literal strings or patterns known to be used in attacks, and the verification mechanism blocks any data matching the blacklist.



Second, vulnerability exploitation technology is constantly improving, and new methods for exploiting existing vulnerability types cannot be blocked by the current blacklist.

Whitelist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A whitelist contains a series of strings, patterns, or a set of standards to match inputs that meet the requirements. This checking mechanism allows matching whitelisted data and blocking any data outside of it. This method is relatively effective, but requires a better design.

filter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Filtering removes potentially malicious characters and leaves safe characters, data-based filtering is usually effective, and in many cases it can be used as a general solution for handling malicious input.

Process data safely
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

